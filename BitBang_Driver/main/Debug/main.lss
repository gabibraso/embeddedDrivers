
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa1  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bf  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	aa d0       	rcall	.+340    	; 0x1fe <main>
  aa:	b2 c0       	rjmp	.+356    	; 0x210 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <bitBangStructInit>:
volatile bool misoState = false;



void bitBangStructInit(volatile uint8_t *Port, unsigned char SSPin, unsigned char SCKPin, unsigned char MOSIPin, unsigned char MISOPin)
{
  ae:	0f 93       	push	r16
	bitBangInit.bitBangPort = Port;
  b0:	e2 e0       	ldi	r30, 0x02	; 2
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	80 83       	st	Z, r24
  b6:	91 83       	std	Z+1, r25	; 0x01
	bitBangInit.SSPin = SSPin;
  b8:	62 83       	std	Z+2, r22	; 0x02
	bitBangInit.SCKPin = SCKPin;
  ba:	43 83       	std	Z+3, r20	; 0x03
	bitBangInit.MOSIPin = MOSIPin;
  bc:	24 83       	std	Z+4, r18	; 0x04
	bitBangInit.MISOPin = MISOPin;
  be:	05 83       	std	Z+5, r16	; 0x05
		
	if(bitBangInit.MOSIPin == '\x00')
  c0:	21 11       	cpse	r18, r1
  c2:	18 c0       	rjmp	.+48     	; 0xf4 <bitBangStructInit+0x46>
	{
		// put in HIGH Z state
		*(bitBangInit.bitBangPort-1) &= ~(1<<bitBangInit.MOSIPin);
  c4:	e8 2f       	mov	r30, r24
  c6:	f9 2f       	mov	r31, r25
  c8:	82 91       	ld	r24, -Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
		*(bitBangInit.bitBangPort) &= ~(1<<bitBangInit.MOSIPin);
  ce:	a2 e0       	ldi	r26, 0x02	; 2
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	ed 91       	ld	r30, X+
  d4:	fc 91       	ld	r31, X
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	20 81       	ld	r18, Z
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	14 96       	adiw	r26, 0x04	; 4
  e0:	0c 90       	ld	r0, X
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <bitBangStructInit+0x3a>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <bitBangStructInit+0x36>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	80 83       	st	Z, r24
  f2:	03 c0       	rjmp	.+6      	; 0xfa <bitBangStructInit+0x4c>
	}else
	{
		mosiState = true;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mosiState>
	}
	
	if(bitBangInit.MISOPin == '\x00')
  fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bitBangInit+0x5>
  fe:	81 11       	cpse	r24, r1
 100:	16 c0       	rjmp	.+44     	; 0x12e <bitBangStructInit+0x80>
	{
		// put in HIGH Z state
		*(bitBangInit.bitBangPort-1) &= ~(1<<bitBangInit.MISOPin);
 102:	e2 e0       	ldi	r30, 0x02	; 2
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	a0 81       	ld	r26, Z
 108:	b1 81       	ldd	r27, Z+1	; 0x01
 10a:	8e 91       	ld	r24, -X
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	8c 93       	st	X, r24
		*(bitBangInit.bitBangPort) &= ~(1<<bitBangInit.MISOPin);
 110:	a0 81       	ld	r26, Z
 112:	b1 81       	ldd	r27, Z+1	; 0x01
 114:	2c 91       	ld	r18, X
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	05 80       	ldd	r0, Z+5	; 0x05
 11c:	02 c0       	rjmp	.+4      	; 0x122 <bitBangStructInit+0x74>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <bitBangStructInit+0x70>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	8c 93       	st	X, r24
 12c:	03 c0       	rjmp	.+6      	; 0x134 <bitBangStructInit+0x86>
	}else
	{
		misoState = true;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <bitBangPortInit>:

void bitBangPortInit()
{
	//DDR - set DDR and make SCK, SS output pin
	*(bitBangInit.bitBangPort-1) |= (1<<bitBangInit.SSPin)|(1<<bitBangInit.SCKPin);
 138:	a2 e0       	ldi	r26, 0x02	; 2
 13a:	b1 e0       	ldi	r27, 0x01	; 1
 13c:	ed 91       	ld	r30, X+
 13e:	fc 91       	ld	r31, X
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	22 91       	ld	r18, -Z
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	12 96       	adiw	r26, 0x02	; 2
 14c:	0c 90       	ld	r0, X
 14e:	12 97       	sbiw	r26, 0x02	; 2
 150:	02 c0       	rjmp	.+4      	; 0x156 <bitBangPortInit+0x1e>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <bitBangPortInit+0x1a>
 15a:	13 96       	adiw	r26, 0x03	; 3
 15c:	0c 90       	ld	r0, X
 15e:	13 97       	sbiw	r26, 0x03	; 3
 160:	02 c0       	rjmp	.+4      	; 0x166 <bitBangPortInit+0x2e>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <bitBangPortInit+0x2a>
 16a:	84 2b       	or	r24, r20
 16c:	82 2b       	or	r24, r18
 16e:	80 83       	st	Z, r24
	
	//DDR - make MOSI pin as output
	if(mosiState)
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mosiState>
 174:	88 23       	and	r24, r24
 176:	79 f0       	breq	.+30     	; 0x196 <bitBangPortInit+0x5e>
	{
		//make it as output
		*(bitBangInit.bitBangPort-1) |= (1<<bitBangInit.MOSIPin);
 178:	ed 91       	ld	r30, X+
 17a:	fc 91       	ld	r31, X
 17c:	11 97       	sbiw	r26, 0x01	; 1
 17e:	22 91       	ld	r18, -Z
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	14 96       	adiw	r26, 0x04	; 4
 186:	0c 90       	ld	r0, X
 188:	02 c0       	rjmp	.+4      	; 0x18e <bitBangPortInit+0x56>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <bitBangPortInit+0x52>
 192:	82 2b       	or	r24, r18
 194:	80 83       	st	Z, r24
	}
	
	//DDR - make MISO pin as input
	if(misoState)
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19a:	88 23       	and	r24, r24
 19c:	91 f0       	breq	.+36     	; 0x1c2 <bitBangPortInit+0x8a>
	{
		//make it as input
		*(bitBangInit.bitBangPort-1) &= ~(1<<bitBangInit.MISOPin);
 19e:	a2 e0       	ldi	r26, 0x02	; 2
 1a0:	b1 e0       	ldi	r27, 0x01	; 1
 1a2:	ed 91       	ld	r30, X+
 1a4:	fc 91       	ld	r31, X
 1a6:	11 97       	sbiw	r26, 0x01	; 1
 1a8:	22 91       	ld	r18, -Z
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	15 96       	adiw	r26, 0x05	; 5
 1b0:	0c 90       	ld	r0, X
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <bitBangPortInit+0x80>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <bitBangPortInit+0x7c>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	80 83       	st	Z, r24
	}
	
	//set the SS pin to HIGH
	*(bitBangInit.bitBangPort) |=  (1<<bitBangInit.SSPin);
 1c2:	e2 e0       	ldi	r30, 0x02	; 2
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	a0 81       	ld	r26, Z
 1c8:	b1 81       	ldd	r27, Z+1	; 0x01
 1ca:	4c 91       	ld	r20, X
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9c 01       	movw	r18, r24
 1d2:	02 80       	ldd	r0, Z+2	; 0x02
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <bitBangPortInit+0xa2>
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <bitBangPortInit+0x9e>
 1de:	24 2b       	or	r18, r20
 1e0:	2c 93       	st	X, r18
	*(bitBangInit.bitBangPort) &=  ~(1<<bitBangInit.SCKPin);
 1e2:	a0 81       	ld	r26, Z
 1e4:	b1 81       	ldd	r27, Z+1	; 0x01
 1e6:	2c 91       	ld	r18, X
 1e8:	03 80       	ldd	r0, Z+3	; 0x03
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <bitBangPortInit+0xb8>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <bitBangPortInit+0xb4>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8c 93       	st	X, r24
	//disable SPI
	SPCR = 0;
 1fa:	1d b8       	out	0x0d, r1	; 13
 1fc:	08 95       	ret

000001fe <main>:


int main(void)
{

	bitBangStructInit(&PORTB,PORTB0,PORTB1,PORTB2,PORTB3);
 1fe:	03 e0       	ldi	r16, 0x03	; 3
 200:	22 e0       	ldi	r18, 0x02	; 2
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	51 df       	rcall	.-350    	; 0xae <bitBangStructInit>
	bitBangPortInit();
 20c:	95 df       	rcall	.-214    	; 0x138 <bitBangPortInit>
 20e:	ff cf       	rjmp	.-2      	; 0x20e <main+0x10>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
